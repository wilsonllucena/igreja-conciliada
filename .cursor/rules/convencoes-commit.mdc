---
alwaysApply: true
---

# Conven√ß√µes de Commit

## Formato Obrigat√≥rio

Cada tarefa deve resultar em **UM √öNICO COMMIT** com mensagem no formato:

```
feat: [descri√ß√£o da funcionalidade implementada]
fix: [descri√ß√£o do problema resolvido]
```

## Tipos de Commit

### feat: (Feature)
Para novas funcionalidades, implementa√ß√µes ou adi√ß√µes ao sistema:

**Exemplos:**
- `feat: adiciona endpoint para cria√ß√£o de cess√µes`
- `feat: implementa valida√ß√£o de dados no DTO`
- `feat: adiciona provider para integra√ß√£o com nova API`
- `feat: cria service para processamento de documentos`

### fix: (Corre√ß√£o)
Para corre√ß√£o de bugs, problemas ou falhas no sistema:

**Exemplos:**
- `fix: corrige valida√ß√£o de CPF no processo de cess√£o`
- `fix: resolve erro de timeout na integra√ß√£o com Taya`
- `fix: ajusta formata√ß√£o de data nos relat√≥rios`
- `fix: corrige vazamento de mem√≥ria no processamento de arquivos`

## Diretrizes de Implementa√ß√£o

### 1. Uma Tarefa = Um Commit
- Implemente uma funcionalidade completa por commit
- Evite commits parciais ou quebrados
- Cada commit deve deixar o sistema em estado funcional

### 2. Descri√ß√µes Claras
- Use verbos no presente/infinitivo
- Seja espec√≠fico sobre o que foi implementado/corrigido
- Evite mensagens vagas como "ajustes" ou "melhorias"

### 3. Escopo das Mudan√ßas
- Mantenha commits focados em uma √∫nica responsabilidade
- Se a tarefa for muito grande, divida em subtarefas menores
- Cada commit deve ser revis√°vel independentemente

## Exemplos de Bons Commits

### Features
```bash
feat: implementa gera√ß√£o autom√°tica de documentos CCB
feat: adiciona cron job para processamento de cess√µes
feat: cria middleware de autentica√ß√£o JWT
feat: implementa upload de arquivos para Google Storage
```

### Fixes  
```bash
fix: corrige c√°lculo de juros no processamento de cess√µes
fix: resolve problema de conex√£o com banco de dados
fix: ajusta valida√ß√£o de campos obrigat√≥rios no DTO
fix: corrige formata√ß√£o de n√∫meros nos relat√≥rios PDF
```

## Workflow de Commit

1. **Implementar** a funcionalidade/corre√ß√£o completa
2. **Testar** para garantir que funciona corretamente
3. **Stagear** todos os arquivos relacionados
4. **Commitar** com mensagem no formato correto
5. **Push** para o reposit√≥rio

```bash
# Exemplo de workflow
git add .
git commit -m "feat: implementa valida√ß√£o de contratos SCD"
git push origin main
```

## Valida√ß√£o Antes do Commit

### ‚úÖ Checklist:
- [ ] A funcionalidade/corre√ß√£o est√° completa?
- [ ] O c√≥digo foi testado e est√° funcionando?
- [ ] A mensagem segue o formato correto?
- [ ] O commit n√£o quebra funcionalidades existentes?
- [ ] Todos os arquivos relevantes est√£o inclu√≠dos?

### üö´ Evitar:
- Commits com mensagens gen√©ricas
- M√∫ltiplos commits para uma √∫nica tarefa
- Commits que deixam o sistema quebrado
- Misturar features e fixes no mesmo commit

---

*Esta conven√ß√£o garante um hist√≥rico de commits limpo, rastre√°vel e profissional, facilitando code reviews e manuten√ß√£o do projeto.*