---
alwaysApply: true
---

# Controle Manual de Push - Pol√≠tica Obrigat√≥ria

## Princ√≠pio Fundamental

**NUNCA fazer push automaticamente ap√≥s commits.** O push deve SEMPRE ser uma a√ß√£o manual e consciente do usu√°rio.

## Regras Obrigat√≥rias

### 1. Separa√ß√£o Commit vs Push
- **Commit**: Opera√ß√£o local que salva mudan√ßas no reposit√≥rio local
- **Push**: Opera√ß√£o remota que envia commits para o reposit√≥rio remoto
- Estas s√£o opera√ß√µes SEPARADAS e devem ser tratadas independentemente

### 2. Workflow Obrigat√≥rio
```bash
# ‚úÖ Correto: Duas etapas distintas
git add .
git commit -m "feat: implementa nova funcionalidade"
# PAUSA - Usu√°rio decide quando fazer push
git push origin main

# ‚ùå Incorreto: Push autom√°tico ap√≥s commit
git commit -m "feat: nova funcionalidade" && git push origin main
```

### 3. Motivos para Push Manual

#### Controle de Timing
- Permite revisar commits antes de enviar
- Possibilita ajustes de √∫ltimo momento
- Evita pushs acidentais de c√≥digo incompleto

#### Controle de Qualidade
- Tempo para executar testes locais
- Verifica√ß√£o final do c√≥digo
- Possibilidade de squash/rebase se necess√°rio

#### Controle de Deploy
- Em ambientes com CI/CD, push pode triggar deploy
- Usu√°rio deve ter controle total sobre quando isso acontece
- Evita deploys n√£o intencionais

## Implementa√ß√£o no C√≥digo

### ‚úÖ Comandos Permitidos
```bash
# Commit individual
git commit -m "feat: adiciona valida√ß√£o de entrada"

# Commit com staging
git add . && git commit -m "fix: corrige bug de valida√ß√£o"

# Push manual separado
git push origin main
git push origin feature-branch
```

### ‚ùå Comandos Proibidos
```bash
# Push autom√°tico ap√≥s commit
git commit -m "mudan√ßa" && git push

# Scripts que fazem commit + push automaticamente
./deploy.sh  # se incluir push autom√°tico

# Aliases que combinam commit + push
git cap "mensagem"  # commit + push em uma opera√ß√£o
```

## Instru√ß√µes para AI/Assistentes

### Quando Sugerir Commits
1. Sempre sugerir apenas o comando de commit
2. NUNCA incluir push na mesma linha de comando
3. Mencionar explicitamente que push √© uma etapa separada

### Exemplo de Orienta√ß√£o Correta
```
"Execute o commit com o comando:
git commit -m 'feat: implementa funcionalidade X'

Ap√≥s revisar o commit, voc√™ pode fazer push quando estiver pronto:
git push origin main"
```

### Exemplo de Orienta√ß√£o Incorreta
```
"Execute:
git commit -m 'feat: implementa funcionalidade X' && git push origin main"
```

## Exce√ß√µes (Muito Raras)

### Quando Push Autom√°tico Pode Ser Considerado
- Scripts de CI/CD em pipelines controladas
- Ambientes de desenvolvimento isolados e pessoais
- Deploy autom√°tico em staging (NUNCA em produ√ß√£o)

### Condi√ß√µes para Exce√ß√£o
- Aprova√ß√£o expl√≠cita do usu√°rio
- Ambiente claramente identificado como seguro
- Documenta√ß√£o clara do comportamento autom√°tico

## Checklist de Verifica√ß√£o

### ‚úÖ Antes de Sugerir Qualquer Comando:
1. O comando inclui push autom√°tico?
2. O usu√°rio tem controle total sobre o timing?
3. Existe separa√ß√£o clara entre commit e push?
4. O usu√°rio pode revisar antes de enviar para remoto?

### üö´ Sinais de Viola√ß√£o:
- `&& git push` em comandos
- Scripts que fazem commit + push
- Sugest√µes de push imediatamente ap√≥s commit
- Automa√ß√£o que remove controle do usu√°rio

## Benef√≠cios da Pol√≠tica

### 1. Seguran√ßa
- Evita pushs acidentais de c√≥digo sens√≠vel
- Permite revis√£o final antes de compartilhar
- Reduz risco de quebrar c√≥digo remoto

### 2. Qualidade
- Tempo para testes locais adicionais
- Possibilidade de ajustes de √∫ltima hora
- Melhor organiza√ß√£o de commits

### 3. Controle
- Usu√°rio mant√©m controle total sobre timing
- Possibilidade de trabalhar offline
- Flexibilidade para organizar m√∫ltiplos commits

---

*Esta pol√≠tica garante que o usu√°rio sempre mantenha controle total sobre quando suas mudan√ßas s√£o enviadas para o reposit√≥rio remoto, promovendo seguran√ßa, qualidade e flexibilidade no desenvolvimento.*