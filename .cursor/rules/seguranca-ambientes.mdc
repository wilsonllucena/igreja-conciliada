---
alwaysApply: true
description: Diretrizes de seguran√ßa e gerenciamento de ambientes
---

# Seguran√ßa e Gerenciamento de Ambientes

## Ambientes Suportados

### 1. Development (dev)
- Dados simulados permitidos APENAS para testes
- Logs detalhados habilitados
- Valida√ß√µes relaxadas para facilitar desenvolvimento

### 2. Test (test)  
- Dados simulados necess√°rios e obrigat√≥rios
- Cobertura completa de testes
- Ambiente isolado para valida√ß√µes

### 3. Production (prod)
- **NUNCA simular dados em produ√ß√£o**
- Logs m√≠nimos e seguros
- Valida√ß√µes rigorosas obrigat√≥rias
- Monitoramento ativo

## Princ√≠pios de Seguran√ßa

### 1. Dados Sens√≠veis
- **NUNCA** hardcode credenciais, tokens ou senhas
- Use sempre vari√°veis de ambiente
- Valide e sanitize todas as entradas
- Implemente rate limiting quando aplic√°vel

### 2. Autentica√ß√£o e Autoriza√ß√£o
- Sempre priorize seguran√ßa sobre conveni√™ncia
- Explique implica√ß√µes de seguran√ßa de cada decis√£o
- Use tokens com expira√ß√£o apropriada
- Implemente logs de auditoria para opera√ß√µes sens√≠veis

### 3. Integra√ß√£o com Servi√ßos Externos
- **Providers Atuais**: [providers/](mdc:src/providers/)
  - [Taya Provider](mcp:src/providers/taya.provider.ts) - API financeira
  - [SendGrid Provider](mcp:src/providers/sendgrid.provider.ts) - Email
  - [Google Storage Provider](mcp:src/providers/google-storage.provider.ts) - Storage
  - [Z-API Provider](mcp:src/providers/z-api.provider.ts) - WhatsApp

- Sempre trate falhas de integra√ß√£o graciosamente
- Implemente retry policies com backoff
- Configure timeouts apropriados
- Log erros sem expor dados sens√≠veis

## Configura√ß√£o de Ambiente

### Estrutura Obrigat√≥ria
```typescript
// config/environment.ts
export const config = {
  environment: process.env.NODE_ENV || 'development',
  database: {
    host: process.env.DB_HOST,
    // ... sem valores hardcoded
  },
  security: {
    jwtSecret: process.env.JWT_SECRET,
    // ... sempre via env vars
  }
}
```

### Valida√ß√£o de Configura√ß√£o
- Valide TODAS as vari√°veis de ambiente obrigat√≥rias no startup
- Falhe r√°pido se configura√ß√£o essencial estiver ausente
- Use diferentes configura√ß√µes por ambiente

## Checklist de Seguran√ßa

### ‚úÖ Antes de Implementar:
1. Dados sens√≠veis est√£o em vari√°veis de ambiente?
2. Entradas s√£o validadas e sanitizadas?
3. Autentica√ß√£o est√° implementada corretamente?
4. Logs n√£o exp√µem informa√ß√µes sens√≠veis?
5. Rate limiting est√° configurado quando necess√°rio?

### üö´ Nunca Fa√ßa:
- Hardcode credenciais ou tokens
- Log senhas ou dados sens√≠veis
- Ignore valida√ß√£o de entrada
- Use dados reais em ambiente de teste
- Implemente autentica√ß√£o sem HTTPS

## Tratamento de Erros Seguro

### ‚ùå Incorreto:
```typescript
catch (error) {
  res.status(500).json({ 
    error: error.message, // Pode expor informa√ß√µes internas
    stack: error.stack     // NUNCA exponha stack traces
  });
}
```

### ‚úÖ Correto:
```typescript
catch (error) {
  logger.error('Database operation failed', { 
    userId: user.id, 
    operation: 'createCession',
    error: error.message 
  });
  
  res.status(500).json({ 
    message: 'Internal server error',
    code: 'OPERATION_FAILED'
  });
}
```

## Monitoramento e Auditoria

### Eventos que Devem Ser Logados
- Login/logout de usu√°rios
- Opera√ß√µes financeiras (cria√ß√£o de cess√µes)
- Falhas de autentica√ß√£o
- Acesso a dados sens√≠veis
- Mudan√ßas de configura√ß√£o

### Estrutura de Log Segura
```typescript
logger.info('User action performed', {
  userId: user.id,           // ‚úÖ ID do usu√°rio
  action: 'create_cession',  // ‚úÖ A√ß√£o realizada
  timestamp: new Date(),     // ‚úÖ Timestamp
  ip: request.ip,           // ‚úÖ IP (se relevante)
  // ‚ùå NUNCA logar senhas, tokens, dados pessoais completos
});
```

## Configura√ß√£o Espec√≠fica do Projeto

### Arquivo de Configura√ß√£o ORM
- [ORM Config](mcp:src/configs/ormconfig.ts) - Configura√ß√£o do banco
- Sempre use vari√°veis de ambiente para credenciais
- Configure SSL para produ√ß√£o

### Providers de Terceiros
- Configure timeouts apropriados
- Implemente circuit breakers se necess√°rio
- Monitor sa√∫de das integra√ß√µes

---

*Esta regra garante que todas as implementa√ß√µes sigam pr√°ticas seguras e adequadas para cada ambiente, protegendo dados sens√≠veis e mantendo a integridade do sistema.*